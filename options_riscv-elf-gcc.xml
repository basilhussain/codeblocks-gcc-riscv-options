<?xml version="1.0"?>
<!DOCTYPE CodeBlocks_compiler_options>
<CodeBlocks_compiler_options>
    <if platform="windows">
        <Program name="C"         value="riscv-none-elf-gcc.exe"/>
        <Program name="CPP"       value="riscv-none-elf-g++.exe"/>
        <Program name="LD"        value="riscv-none-elf-g++.exe"/>
        <Program name="DBGconfig" value=""/>
        <Program name="LIB"       value="riscv-none-elf-ar.exe"/>
        <Program name="WINDRES"   value=""/>
        <Program name="MAKE"      value="make.exe"/>
    </if>
    <else>
        <Program name="C"         value="riscv-none-elf-gcc"/>
        <Program name="CPP"       value="riscv-none-elf-g++"/>
        <Program name="LD"        value="riscv-none-elf-g++"/>
        <Program name="DBGconfig" value=""/>
        <Program name="LIB"       value="riscv-none-elf-ar"/>
        <Program name="WINDRES"   value=""/>
        <Program name="MAKE"      value="make"/>
    </else>

    <Switch name="includeDirs"             value="-I"/>
    <Switch name="libDirs"                 value="-L"/>
    <Switch name="linkLibs"                value="-l"/>
    <Switch name="defines"                 value="-D"/>
    <Switch name="genericSwitch"           value="-"/>
    <Switch name="objectExtension"         value="o"/>
    <Switch name="needDependencies"        value="true"/>
    <Switch name="forceCompilerUseQuotes"  value="false"/>
    <Switch name="forceLinkerUseQuotes"    value="false"/>
    <Switch name="logging"                 value="default"/>
    <Switch name="libPrefix"               value="lib"/>
    <Switch name="libExtension"            value="a"/>
    <Switch name="linkerNeedsLibPrefix"    value="false"/>
    <Switch name="linkerNeedsLibExtension" value="false"/>

    <Option name="Produce debugging symbols"
            option="-g"
            category="Debugging"
            checkAgainst="-O -O1 -O2 -O3 -Os"
            checkMessage="You have optimizations enabled. This is Not A Good Thing(tm) when producing debugging symbols..."
            supersedes="-s"/>

    <if platform="windows">
        <Option name="Profile code when executed"
                option="-pg"
                category="Profiling"
                additionalLibs="-pg -lgmon"
                supersedes="-s"/>
    </if>
    <else>
        <Option name="Profile code when executed"
                option="-pg"
                category="Profiling"
                additionalLibs="-pg"
                supersedes="-s"/>
    </else>

	<Option name="Make the type char be signed"
			option="-fsigned-char"
			category="General"
			supersedes="-funsigned-char"/>
	<Option name="Make the type char be unsigned"
			option="-funsigned-char"
			category="General"
			supersedes="-fsigned-char"/>

    <Common name="warnings"/>

    <Category name="Warnings">
        <Option name="Enable Effective-C++ warnings (thanks Scott Meyers)"
                option="-Weffc++"/>
        <Option name="Warn whenever a switch statement does not have a default case"
                option="-Wswitch-default"/>
        <Option name="Warn whenever a switch statement has an index of enumerated type and lacks a case for one or more of the named codes of that enumeration"
                option="-Wswitch-enum"/>
        <Option name="Warn if a user supplied include directory does not exist"
                option="-Wmissing-include-dirs"/>
        <Option name="Warn if a global function is defined without a previous declaration"
                option="-Wmissing-declarations"/>
        <Option name="Warn if the compiler detects that code will never be executed"
                option="-Wunreachable-code"/>
        <Option name="Warn if a function can not be inlined and it was declared as inline"
                option="-Winline"/>
        <Option name="Warn if floating point values are used in equality comparisons"
                option="-Wfloat-equal"/>
        <Option name="Warn if an undefined identifier is evaluated in an '#if' directive"
                option="-Wundef"/>
        <Option name="Warn whenever a pointer is cast such that the required alignment of the target is increased"
                option="-Wcast-align"/>
        <Option name="Warn if anything is declared more than once in the same scope"
                option="-Wredundant-decls"/>
        <Option name="Warn about unitialized variables which are initialized with themselves"
                option="-Winit-self"/>
        <Option name="Warn whenever a local variable shadows another local variable, parameter or global variable or whenever a built-in function is shadowed"
                option="-Wshadow"/>
        <Option name="Warn if a class has virtual functions but no virtual destructor"
                option="-Wnon-virtual-dtor"/>
    </Category>

    <Common name="optimization"/>
	
    <Option name="Don't keep the frame pointer in a register for functions that don't need one"
            option="-fomit-frame-pointer"
            category="Optimization"
            checkAgainst="-g -ggdb"
            checkMessage="You have debugging symbols enabled. This is Not A Good Thing(tm) when optimizing..."/>
	<Option name="Place each function into its own section in the output file"
			option="-ffunction-sections"
            category="Optimization"/>
	<Option name="Place each data item into its own section in the output file"
			option="-fdata-sections"
            category="Optimization"/>

    <Category name="RISC-V CPU specific">
		<Option name="Use of PLTs when generating position-independent code: allow (default)"
				option="-mplt"
				supersedes="-mno-plt"/>
		<Option name="Use of PLTs when generating position-independent code: disallow"
				option="-mno-plt"
				supersedes="-mplt"/>
		<Option name="Use hardware floating-point divide and square root instructions: allow"
				option="-mfdiv"
				supersedes="-mno-fdiv"/>
		<Option name="Use hardware floating-point divide and square root instructions: disallow"
				option="-mno-fdiv"
				supersedes="-mfdiv"/>
		<Option name="Use hardware instructions for integer division: allow"
				option="-mdiv"
				supersedes="-mno-div"/>
		<Option name="Use hardware instructions for integer division: disallow"
				option="-mno-div"
				supersedes="-mdiv"/>
		<Option name="Produce code conforming to ISA specification version 2.2"
				option="-misa-spec=2.2"
				supersedes="-misa-spec=20190608 -misa-spec=20191213"/>
		<Option name="Produce code conforming to ISA specification version 20190608"
				option="-misa-spec=20190608"
				supersedes="-misa-spec=2.2 -misa-spec=20191213"/>
		<Option name="Produce code conforming to ISA specification version 20191213 (default)"
				option="-misa-spec=20191213"
				supersedes="-misa-spec=2.2 -misa-spec=20190608"/>
		<Option name="Use smaller but slower prologue/epilogue code that uses library calls: allow"
				option="-msave-restore"
				supersedes="-mno-save-restore"/>
		<Option name="Use smaller but slower prologue/epilogue code that uses library calls: disallow (default)"
				option="-mno-save-restore"
				supersedes="-msave-restore"/>
		<Option name="Attempt to make more use of compressed load/store instructions: allow"
				option="-mshorten-memrefs"
				supersedes="-mno-shorten-memrefs"/>
		<Option name="Attempt to make more use of compressed load/store instructions: disallow"
				option="-mno-shorten-memrefs"
				supersedes="-mshorten-memrefs"/>
		<Option name="Generate unaligned memory accesses: allow"
				option="-mstrict-align"
				supersedes="-mno-strict-align"/>
		<Option name="Generate unaligned memory accesses: disallow"
				option="-mno-strict-align"
				supersedes="-mstrict-align"/>
		<Option name="Generate code for the medium-low code model"
				option="-mcmodel=medlow"
				supersedes="-mcmodel=medany"/>
		<Option name="Generate code for the medium-any code model"
				option="-mcmodel=medany"
				supersedes="-mcmodel=medlow"/>
		<Option name="Use assembler relocation operators when dealing with symbolic addresses: allow"
				option="-mexplicit-relocs"
				supersedes="-mno-exlicit-relocs"/>
		<Option name="Use assembler relocation operators when dealing with symbolic addresses: disallow"
				option="-mno-exlicit-relocs"
				supersedes="-mexplicit-relocs"/>
		<Option name="Take advantage of linker relaxations: allow (default)"
				option="-mrelax"
				supersedes="-mno-relax"/>
		<Option name="Take advantage of linker relaxations: disallow"
				option="-mno-relax"
				supersedes="-mrelax"/>
		<Option name="Emit RISC-V attribute to record extra information into ELF objects: allow"
				option="-mriscv-attribute"
				supersedes="-mno-riscv-attribute"/>
		<Option name="Emit RISC-V attribute to record extra information into ELF objects: disallow"
				option="-mno-riscv-attribute"
				supersedes="-mriscv-attribute"/>
		<Option name="CSR checking: allow"
				option="-mcsr-check"
				supersedes="-mno-csr-check"/>
		<Option name="CSR checking: disallow"
				option="-mno-csr-check"
				supersedes="-mcsr-check"/>
		<Option name="Alignment of variables and constants: X register width (default)"
				option="-malign-data=xlen"
				supersedes="-malign-data=natural"/>
		<Option name="Alignment of variables and constants: natural"
				option="-malign-data=natural"
				supersedes="-malign-data=xlen"/>				
        <Option name="Generate code for little-endian processors"
                option="-mlittle-endian"
                supersedes="-mbig-endian"/>
        <Option name="Generate code for big-endian processors"
                option="-mbig-endian"
                supersedes="-mlittle-endian"/>
    </Category>

	<Category name="RISC-V architecture">
		<Option name="RV32I"
				option="-march=rv32i"
				supersedes="-march=rv32im -march=rv32imac -march=rv32imacf -march=rv32e -march=rv32ec -march=rv32ec_zicsr -march=rv64i"/>
		<Option name="RV32IM"
				option="-march=rv32im"
				supersedes="-march=rv32i -march=rv32imac -march=rv32imacf -march=rv32e -march=rv32ec -march=rv32ec_zicsr -march=rv64i"/>
		<Option name="RV32IMAC"
				option="-march=rv32imac"
				supersedes="-march=rv32i -march=rv32im -march=rv32imacf -march=rv32e -march=rv32ec -march=rv32ec_zicsr -march=rv64i"/>
		<Option name="RV32IMACF"
				option="-march=rv32imacf"
				supersedes="-march=rv32i -march=rv32im -march=rv32imac -march=rv32e -march=rv32ec -march=rv32ec_zicsr -march=rv64i"/>
		<Option name="RV32E"
				option="-march=rv32e"
				supersedes="-march=rv32i -march=rv32im -march=rv32imac -march=rv32imacf -march=rv32ec -march=rv32ec_zicsr -march=rv64i"/>
		<Option name="RV32EC"
				option="-march=rv32ec"
				supersedes="-march=rv32i -march=rv32im -march=rv32imac -march=rv32imacf -march=rv32e -march=rv32ec_zicsr -march=rv64i"/>
		<Option name="RV32EC with CSR"
				option="-march=rv32ec_zicsr"
				supersedes="-march=rv32i -march=rv32im -march=rv32imac -march=rv32imacf -march=rv32e -march=rv32ec -march=rv64i"/>
		<!-- TODO: add 'rv32ecxw' for CH32V003? Assuming mainline GCC supports it -->
		<Option name="RV64I"
				option="-march=rv64i"
				supersedes="-march=rv32i -march=rv32im -march=rv32imac -march=rv32imacf -march=rv32e -march=rv32ec -march=rv32ec_zicsr"/>
	</Category>

	<Category name="RISC-V ABI calling conventions">
		<!-- See https://www.sifive.com/blog/all-aboard-part-1-compiler-args -->
		<Option name="32-bit int, long and pointers"
				option="-mabi=ilp32"
				supersedes="-mabi=ilp32f -mabi=ilp32d -mabi=ilp32e -mabi=lp64 -mabi=lp64f -mabi=lp64d"/>
		<Option name="32-bit int, long and pointers; 32-bit or smaller floats passed in registers (F extension only)"
				option="-mabi=ilp32f"
				supersedes="-mabi=ilp32 -mabi=ilp32d -mabi=ilp32e -mabi=lp64 -mabi=lp64f -mabi=lp64d"/>
		<Option name="32-bit int, long and pointers; 64-bit or smaller floats passed in registers (D extension only)"
				option="-mabi=ilp32d"
				supersedes="-mabi=ilp32 -mabi=ilp32f -mabi=ilp32e -mabi=lp64 -mabi=lp64f -mabi=lp64d"/>
		<Option name="32-bit int, long and pointers (RV32E architecture only)"
				option="-mabi=ilp32e"
				supersedes=" -mabi=ilp32 -mabi=ilp32f -mabi=ilp32d -mabi=lp64 -mabi=lp64f -mabi=lp64d"/>
		<Option name="32-bit int; 64-bit long and pointers"
				option="-mabi=lp64"
				supersedes="-mabi=ilp32 -mabi=ilp32f -mabi=ilp32d -mabi=ilp32e -mabi=lp64f -mabi=lp64d"/>
		<Option name="32-bit int; 64-bit long and pointers; 32-bit or smaller floats passed in registers (F extension only)"
				option="-mabi=lp64f"
				supersedes="-mabi=ilp32 -mabi=ilp32f -mabi=ilp32d -mabi=ilp32e -mabi=lp64 -mabi=lp64d"/>
		<Option name="32-bit int; 64-bit long and pointers; 64-bit or smaller floats passed in registers (D extension only)"
				option="-mabi=lp64d"
				supersedes="-mabi=ilp32 -mabi=ilp32f -mabi=ilp32d -mabi=ilp32e -mabi=lp64 -mabi=lp64f"/>
	</Category>

    <Command name="CompileObject"
             value="$compiler $options $includes -c $file -o $object"/>
    <Command name="GenDependencies"
             value="$compiler -MM $options -MF $dep_object -MT $object $includes $file"/>
    <Command name="CompileResource"
             value="$rescomp $res_includes $res_options -J rc -O coff -i $file -o $resource_output"/>
    <Command name="LinkConsoleExe"
             value="$linker $libdirs -o $exe_output $link_objects $link_resobjects $link_options $libs"/>
    <if platform="windows">
        <Command name="LinkExe"
                 value="$linker $libdirs -o $exe_output $link_objects $link_resobjects $link_options $libs -mwindows"/>
        <Command name="LinkDynamic"
                 value="$linker -shared -Wl,--output-def=$def_output -Wl,--out-implib=$static_output -Wl,--dll $libdirs $link_objects $link_resobjects -o $exe_output $link_options $libs"/>
    </if>
    <else>
        <Command name="LinkExe"
                 value="$linker $libdirs -o $exe_output $link_objects $link_resobjects $link_options $libs"/>
        <Command name="LinkDynamic"
                 value="$linker -shared $libdirs $link_objects $link_resobjects -o $exe_output $link_options $libs"/>
    </else>
    <Command name="LinkNative"
             value="$linker $libdirs -o $exe_output $link_objects $link_resobjects $link_options $libs"/>
    <Command name="LinkStatic"
             value="$lib_linker -r -s $static_output $link_objects"/>
    <Common name="cmds"/>

    <Common name="re"/>

    <Common name="sort"/>
</CodeBlocks_compiler_options>
